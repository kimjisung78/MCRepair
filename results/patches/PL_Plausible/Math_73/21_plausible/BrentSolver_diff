--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_73/21/BrentSolver_Origin.java"	2022-07-18 13:29:11.740827953 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_73/21/BrentSolver.java"	2022-07-18 13:29:11.744827980 +0900
@@ -95,50 +95,7 @@
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
-    public double solve(final UnivariateRealFunction f,
-                        final double min, final double max, final double initial)
-        throws MaxIterationsExceededException, FunctionEvaluationException {
-
-        clearResult();
-        verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
-    }
-
+public double solve ( final UnivariateRealFunction f , final double min , final double max , final double initial ) throws MaxIterationsExceededException , FunctionEvaluationException { clearResult ( ) ; verifySequence ( min , initial , max ) ; double yInitial = f . value ( initial ) ; if ( Math . abs ( yInitial ) <= functionValueAccuracy ) { setResult ( initial , 0 ) ; return result ; } double yMin = f . value ( min ) ; if ( Math . abs ( yMin ) <= functionValueAccuracy ) { setResult ( yMin , 0 ) ; return result ; } if ( yInitial * yMin < 0 ) { return solve ( f , min , yMin , initial , yInitial , min , yMin ) ; } double yMax = f . value ( max ) ; if ( Math . abs ( yMax ) <= functionValueAccuracy ) { setResult ( yMax , 0 ) ; return result ; } if ( yInitial * yMax < 0 ) { return solve ( f , initial , yInitial , max , yMax , initial , yInitial ) ; } verifySequence ( min , max , max ) ; return solve ( f , min , yMin , max , yMax , initial , yInitial ) ; }
     /**
      * Find a zero in the given interval.
      * <p>
