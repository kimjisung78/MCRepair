--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_33/93/SimplexTableau_Origin.java"	2022-07-18 13:14:28.169157681 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_33/93/SimplexTableau.java"	2022-07-18 13:14:28.169157681 +0900
@@ -324,48 +324,7 @@
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
-    protected void dropPhase1Objective() {
-        if (getNumObjectiveFunctions() == 1) {
-            return;
-        }
-
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
-
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
-            }
-        }
-
-        // non-basic artificial variables
-        for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
-            columnsToDrop.add(col);
-          }
-        }
-
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
-            }
-          }
-        }
-
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
-        }
-
-        this.tableau = new Array2DRowRealMatrix(matrix);
-        this.numArtificialVariables = 0;
-    }
-
+protected void dropPhase1Objective ( ) { if ( getNumObjectiveFunctions ( ) == 1 ) { return ; } List < Integer > columnsToDrop = new ArrayList < Integer > ( ) ; columnsToDrop . add ( 0 ) ; for ( int i = getNumObjectiveFunctions ( ) ; i < getArtificialVariableOffset ( ) ; i ++ ) { final double entry = tableau . getEntry ( 0 , i ) ; if ( Precision . compareTo ( entry , 0.5 , maxUlps ) > 0 ) { columnsToDrop . add ( i ) ; } } for ( int i = 0 ; i < getNumArtificialVariables ( ) ; i ++ ) { int col = i + getArtificialVariableOffset ( ) ; if ( getBasicRow ( col ) == null ) { columnsToDrop . add ( col ) ; } } double [ ] [ ] matrix = new double [ getHeight ( ) - 1 ] [ getWidth ( ) - columnsToDrop . size ( ) ] ; for ( int i = 1 ; i < getHeight ( ) ; i ++ ) { int col = 0 ; for ( int j = 0 ; j < getWidth ( ) ; j ++ ) { if ( ! columnsToDrop . contains ( j ) ) { matrix [ i - 1 ] [ col ++ ] = tableau . getEntry ( i , j ) ; } } } for ( int i = columnsToDrop . size ( ) - 1 ; i >= 0 ; i -- ) { columnLabels . remove ( ( int ) columnsToDrop . get ( i ) ) ; } this . tableau = new Array2DRowRealMatrix ( matrix ) ; this . numArtificialVariables = 0 ; }
     /**
      * @param src the source array
      * @param dest the destination array
