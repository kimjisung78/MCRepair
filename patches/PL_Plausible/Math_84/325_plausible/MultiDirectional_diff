--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_84/325/MultiDirectional_Origin.java"	2022-07-18 13:34:44.666974768 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_84/325/MultiDirectional.java"	2022-07-18 13:34:44.670974793 +0900
@@ -57,47 +57,7 @@
     }
 
     /** {@inheritDoc} */
-    @Override
-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
-
-        }
-
-    }
-
+@ Override protected void iterateSimplex ( final Comparator < RealPointValuePair > comparator ) throws FunctionEvaluationException , OptimizationException , IllegalArgumentException { System . out . println ( comparator ) ; while ( true ) { incrementIterationsCounter ( ) ; final RealPointValuePair [ ] original = simplex ; final RealPointValuePair best = original [ 0 ] ; final RealPointValuePair reflected = evaluateNewSimplex ( original , 1.0 , comparator ) ; if ( comparator . compare ( reflected , best ) < 0 ) { final RealPointValuePair [ ] reflectedSimplex = simplex ; final RealPointValuePair expanded = evaluateNewSimplex ( original , khi , comparator ) ; if ( comparator . compare ( reflected , expanded ) <= 0 ) { simplex = reflectedSimplex ; } return ; } final RealPointValuePair contracted = evaluateNewSimplex ( original , gamma , comparator ) ; if ( comparator . compare ( contracted , best ) < 0 ) { System . out . println ( comparator ) ; } System . out . println ( comparator ) ; return ; } }
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)
      * @param coeff linear coefficient
