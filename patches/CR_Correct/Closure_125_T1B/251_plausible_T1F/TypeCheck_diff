--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Closure_125/251/TypeCheck_Origin.java"	2022-07-18 11:56:15.221118220 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Closure_125/251/TypeCheck.java"	2022-07-18 11:56:15.225118239 +0900
@@ -1653,23 +1653,7 @@
   /**
    * Visits a NEW node.
    */
-  private void visitNew(NodeTraversal t, Node n) {
-    Node constructor = n.getFirstChild();
-    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
-        visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
-      } else {
-        ensureTyped(t, n);
-      }
-    } else {
-      report(t, n, NOT_A_CONSTRUCTOR);
-      ensureTyped(t, n);
-    }
-  }
-
+private void visitNew ( NodeTraversal t , Node n ) { Node constructor = n . getFirstChild ( ) ; JSType type = getJSType ( constructor ) . restrictByNotNullOrUndefined ( ) ; if ( type . isConstructor ( ) || type . isEmptyType ( ) || type . isUnknownType ( ) ) { FunctionType fnType = type . toMaybeFunctionType ( ) ; if ( fnType != null && ! fnType . isNativeObjectType ( ) ) { visitParameterList ( t , n , fnType ) ; ensureTyped ( t , n , fnType . getInstanceType ( ) ) ; } else { ensureTyped ( t , n ) ; } } else { report ( t , n , NOT_A_CONSTRUCTOR ) ; ensureTyped ( t , n ) ; } }
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
