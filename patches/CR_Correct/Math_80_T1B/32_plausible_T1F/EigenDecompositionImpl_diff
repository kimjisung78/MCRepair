--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_80/32/EigenDecompositionImpl_Origin.java"	2022-07-18 13:33:19.190440021 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/APR_Resources/repair/combination_patches/Math_80/32/EigenDecompositionImpl.java"	2022-07-18 13:33:19.194440047 +0900
@@ -1129,23 +1129,7 @@
      * only every other element)
      * @return true if qd array was flipped
      */
-    private boolean flipIfWarranted(final int n, final int step) {
-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
-            return true;
-        }
-        return false;
-    }
-
+private boolean flipIfWarranted ( final int n , final int step ) { if ( 1.5 * work [ pingPong ] < work [ 4 * ( n - 1 ) + pingPong ] ) { int j = 4 * ( n - 1 ) ; for ( int i = 0 ; i < j ; i += 4 ) { for ( int k = 0 ; k < 4 ; k += step ) { final double tmp = work [ i + k ] ; work [ i + k ] = work [ j - k ] ; work [ j - k ] = tmp ; } j -= 4 ; } return true ; } return false ; }
     /**
      * Compute an interval containing all realEigenvalues of a block.
      * @param index index of the first row of the block
